---
title: SSL Certificates - an easy to understand guide
layout: post
tags: post
---

<p>As with any technology, I think it's very important that first we understand the problem that this technology is trying to solve. Let's try to understand the problem through an example.</p>
<h2>Problem with sending messages in plain text</h2>
<p>We are operating a website where we are selling some fancy coffee. For completing purchases we need payment information from our customers. Our customer, Bob, is sitting in a coffee shop and is trying to buy our newest product on sale. He just connected his laptop to a shady public Wi-Fi that is controlled by a hacker who can read the traffic that goes through this network. If we are sending the payment information in plain text the hacker is able to intercept the traffic and can easily read the payment information that is sent.</p>
<h2>Encryption to the rescue</h2>
<p>(Encryption is a very big topic on its own and I am over simplifying things in this section, but this is enough for us to understand the big picture.)</p>
<p>
    The simplest and quickest form of encryption that we can use is symmetric encryption. In this case there is a single key that can both encrypt (lock) and decrypt (unlock) messages.<br />
    In our story Bobs laptop can generate a random key and send it to our website. After both the website and Bobs laptop agreed on this shared key all the following communication can be encrypted with it and there would be no more plain text messages to capture.
</p>
<p>BUT! What if the hacker also intercepted Bobs first message, the one that contained the secret key? In this case the hacker would also know the key and would be able to decrypt the messages.</p>
<h2>Asymmetric encryption</h2>
<p>
    When using asymmetric encryption we have a pair of keys - a private and a public key. If something is encrypted with one of the keys it can only be decrypted with the other one and vice versa.<br />
    The beauty of this setup is that the website server can share its public key freely. By doing this the clients can encrypt messages using the public key of the website and be sure that only the website can read the message.
</p>
<p>In our example Bobs browser would not send the symmetric key it generated in plain text, but instead it would encrypt it using the websites public key. Because this messages can only be decrypted by using the private key we can be sure that only the website can read this message.</p>
<p>So to recap: The client (Bobs browser) generates a (symmetric) key. Encrypts it using the public key of the web server and sends it. The web server can decrypt the message using its private key. Now both the web server and the client have the key that will be used for further communication.</p>
<p>And finally we can send those credit card information... BUT! What if we are dealing with a really skilled hacker?</p>
<h2>Man-in-the-Middle Attack</h2>
<p>
    Our setup is still vulnerable. The problem is that a skilled hacker that controls the Wi-Fi network could intercept all the messages from the client and impersonate the web server. In this case the hacker could send its own public key to the client, acting as the real website. The hacker can act as a middle-man, forwarding the content between the client and the original website. In this case the client would have no way to know that he is not talking with the real website.<br />
    Since the public key is just a very big random number it doesn't carry any more information about its source. When the client receives a public key it cannot be sure that this key really belongs to the website he is trying to connect to.<br />
    SSL Certificates were invented to solve this problem.
</p>
<h2>SSL Certificates</h2>
<p>
    An SSL Certificate in its most basic form works just like an identity card. The ID card certifies that the information from the ID card belongs to the person from the photo. You trust the information on an identity card because you trust the issuer of the card, the government.<br />
    A SSL Certificate certifies that a given public key belongs to a given domain or IP address and it is signed by a third party (CA - Certificate Authority) organization. If you trust the authority who signed it, then you can trust the certificate.
</p>
<p>These formal definitions like, "certificate" and "authority" may seem overwhelming, but there is nothing complicated about SSL Certificates. A certificate is just a piece of data with a standard format (X.509 is the name of the standard).</p>
<h2>What is a certificate?</h2>
The most important information of a certificate are:
<ul>
    <li>validity (the period during which the certificate is valid)</li>
    <li>domain name of the subject (CN)</li>
    <li>more information about the subject (company name, county, etc)</li>
    <li>public key of the subject</li>
    <li>information about the issuer of the certificate (CA)</li>
    <li>signature</li>
</ul>
<p>The certificate is sent to the client in base 64 encoded format and it looks similar to the following example:</p>
<script src="https://gist.github.com/boros-csaba/2ff45a8e3497c789186fb917af4213bc.js"></script>
<p>Ok, so the server instead of just sending its public key it sends a certificate that contains the public key, some extra information and a signature from a third party (CA - Certificate Authority).</p>
<h3>Can the hacker just send its own public key along with the signature of the web server?</h3>
<p>The hacker can get the certificate of the web server - it is public information. And since the certificate is just a block of information - the hacker could send the its own public key together with the signature from the certificate of the web server. So this is a valid question...</p>
<p>
    The trick is that the signature of the certificate is created by hashing all of the data from the certificate and encrypting it using the private key of the Certificate Authority.<br/>
    When Bobs browser receives the certificate it will decrypt the signature using the public key of the Certificate authority and it will compare the data from the signature with the content of the certificate. In this case the browser would notice that the public key from the certificate doesn't match with the one that was encrypted in the signature.
</p>
<h2>Who can sign a certificate?</h2>
<p>
    Basically anyone... A certificate is basically signed by a private key. This signing private key in turn has a public key and also a certificate of the public key. And in turn this certificate is also signed, forming a chain of certificates.<br />
    A certificate can also be self-signed, this would be the root certificate.<br />
    A certificate is trusted by the browser if it trusts the root certificate. The operating system and the browser have lists of pre-installed Certificate Authority certificates they trust (such as DigiCert, Go Daddy, Let's Encrypt, etc.)
</p>
<h2>Summary</h2>
<p>Here is a short summary of what happens when Bob needs to send his credit card information to our web server securely using a public wifi.</p>
<p>Our web server has a public and a private key and we have a certificate about the public key from Let's Encrypt. When Bob tries to connect to our website we first send him our certificate. Bobs browser looks at the root certificate of our certificate and decides that it can trust it. It can trust it since the certificate of the CA (Let's Encrypt in our case) is trusted by the browser. Bobs browser decrypts the signature of our certificate using the public key of the CA and compares it to the content of our certificate. After the certificate is found to be valid Bobs laptop generates a secret key. Encrypts this secret key using our public key from our certificate and sends it to our web server. From now on all the communication between us will be encrypted using this secret key - our communication is secure.</p>
<p>Your feedback is welcome! Please let me know if you think there is something important that should be included in this post or if you find anything wrong!</p>
<p>Comments available on <a href="https://dev.to/boroscsaba/ssl-certificates-an-easy-to-understand-guide-1g2a" target="_blank">dev.to</a></p>